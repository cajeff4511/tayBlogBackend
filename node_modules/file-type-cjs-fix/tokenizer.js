class AbstractTokenizer {
  constructor(fileInfo) {
    this.position = 0
    this.numBuffer = new Uint8Array(8)
    this.fileInfo = fileInfo ? fileInfo : {}
  }
  async readToken(token, position = this.position) {
    const uint8Array = Buffer.alloc(token.len)
    const len = await this.readBuffer(uint8Array, { position })
    if (len < token.len)
      throw new EndOfStreamError()
    return token.get(uint8Array, 0)
  }
  async peekToken(token, position = this.position) {
    const uint8Array = Buffer.alloc(token.len)
    const len = await this.peekBuffer(uint8Array, { position })
    if (len < token.len)
      throw new EndOfStreamError()
    return token.get(uint8Array, 0)
  }
  async readNumber(token) {
    const len = await this.readBuffer(this.numBuffer, { length: token.len })
    if (len < token.len)
      throw new EndOfStreamError()
    return token.get(this.numBuffer, 0)
  }
  async peekNumber(token) {
    const len = await this.peekBuffer(this.numBuffer, { length: token.len })
    if (len < token.len)
      throw new EndOfStreamError()
    return token.get(this.numBuffer, 0)
  }
  async ignore(length) {
    if (this.fileInfo.size !== undefined) {
      const bytesLeft = this.fileInfo.size - this.position
      if (length > bytesLeft) {
      this.position += bytesLeft
      return bytesLeft
      }
    }
    this.position += length
    return length
  }
  async close() {
    // empty
  }
  normalizeOptions(uint8Array, options) {
    if (options && options.position !== undefined && options.position < this.position) {
      throw new Error('`options.position` must be equal or greater than `tokenizer.position`')
    }
    if (options) {
      return {
        mayBeLess: options.mayBeLess === true,
        offset: options.offset ? options.offset : 0,
        length: options.length ? options.length : (uint8Array.length - (options.offset ? options.offset : 0)),
        position: options.position ? options.position : this.position
      }
    }
    return {
      mayBeLess: false,
      offset: 0,
      length: uint8Array.length,
      position: this.position
    }
  }
}

module.exports = AbstractTokenizer
